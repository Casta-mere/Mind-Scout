// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  files         Page[]
  CommitCount   CommitCount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Page {
  id           String     @id @default(cuid())
  title        String?    @db.VarChar(255)
  description  String?    @db.VarChar(255)
  content      String?    @db.Text
  status       pageStatus @default(IN_PROGRESS)
  scope        Scope      @default(PROTECTED)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt()
  authorId     String     @db.VarChar(255)
  author       User       @relation(fields: [authorId], references: id)
  reviews      Json?
  reviewedAt   DateTime?
  reviewsCount Int?
}

model CommitCount {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  commitCount    Int      @default(0)
  monthStartDate DateTime
}

enum pageStatus {
  IN_PROGRESS
  ARCHIEVED
}

enum Scope {
  PUBLIC
  PROTECTED
  PRIVATE
}
